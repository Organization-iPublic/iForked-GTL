#-----------------------------------------------------------------------------*
#
#  @file gtl_types.galgas
#
#  @section desc File description
#
#  types for GTL.
#
#  @section copyright Copyright
#
#  Goil OIL compiler, part of Trampoline RTOS
#
#  Trampoline is copyright (c) CNRS, University of Nantes,
#  Ecole Centrale de Nantes
#  Trampoline is protected by the French intellectual property law.
#
#  This software is distributed under the GNU Public Licence V2.
#  Check the LICENSE file in the root directory of Trampoline
#
#  $Date$
#  $Rev$
#  $Author$
#  $URL$
#
#-----------------------------------------------------------------------------*

#=============================================================================*
# @gtlContext is used to store the execution context of a template
#-----------------------------------------------------------------------------*
class @gtlContext {
  @string prefix %setter
  @string path
  @string templateDirectory
}

func emptyContext
  ->@gtlContext context
{
  context = .new { !"" !"" !"" }
}

#=============================================================================*
# @gtlDataList is used to pass arguments to methods and functions
#-----------------------------------------------------------------------------*
list @gtlDataList
{
  @gtlData data
}

#=============================================================================*
# A variable map is a map of variables. Used for variables of a gtl program
# and used in struct and map of the language itself.
#-----------------------------------------------------------------------------*
map @gtlVarMap {
  @gtlData value
  insert put error message "a variable or field named '%K' is already declared in %L"
  search get error message "there is no variable or field named '%K'"
  remove del error message "there is no variable or field named '%K' to delete"
}

setter @gtlVarMap replaceOrCreate
  ?let @lstring key
  ?let @gtlData data
{
  if [self hasKey ![key string]] then
    [!?self del !key ?*]
  end
  [!?self put !key !data]
}

setter @gtlVarMap replaceOrCreateAtLevel
  ?let @lstring key
  ?let @gtlData data
  ?let @uint    level
{
  if [self hasKeyAtLevel ![key string] !level] then
    [!?self del !key ?*]
  end
  [!?self put !key !data]
}

#=============================================================================*
# An expression map is a map of expressions. Used for literal init of structs
# and maps
#-----------------------------------------------------------------------------*
map @gtlExpressionMap {
  @gtlExpression expression
  insert put error message "a field named '%K' is already declared in %L"
  search get error message "there is no or field named '%K'"
  remove del error message "there is no field named '%K' to delete"
}
