#---------------------------------------------------------------------------*
#
#  @file gtl_scanner.galgas
#
#  @section desc File description
#
#  scanner for GTL.
#
#  @section copyright Copyright
#
#  Goil OIL compiler, part of Trampoline RTOS
#
#  Trampoline is copyright (c) CNRS, University of Nantes,
#  Ecole Centrale de Nantes
#  Trampoline is protected by the French intellectual property law.
#
#  This software is distributed under the GNU Public Licence V2.
#  Check the LICENSE file in the root directory of Trampoline
#
#  $Date$
#  $Rev$
#  $Author$
#  $URL$
#
#---------------------------------------------------------------------------*

template lexique gtl_scanner {

template "%" ... "%"

replace "\\%" -> "%"

replace "\\n" -> "\n"

replace "\\\\" -> "\\"

@string identifierString
@bigint intValue
@string tokenString
@string functionContent

style keywordsStyle -> "Keywords"
style delimitersStyle -> "Delimiters"
style nonTerminalStyle -> "Non Terminal Symbols"
style integerStyle -> "Integer Constants"
style floatCsts -> "Floating Point Constants"
style stringStyle -> "String literals"
style commentStyle -> "Comments"

# -------------------------- identifier or lkey word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier"

list goilTemplateKeyWordList style keywordsStyle error message "the '%K' keyword"
{
  "after", "before", "between", "block", "by", "call", "default", "display",
  "do", "down", "else", "elsif", "emptylist", "emptymap", "end", "error",
  "exists", "false", "for", "foreach", "from", "func", "here", "if", "in",
  "import", "listof", "let", "loop", "mapof", "mod", "module", "no", "not", "or",
  "print", "println", "proc", "repeat", "sort", "step", "tab", "template", 
  "then", "to", "true", "typeof", "up", "yes", "warning", "while", "write",
  "executable", "variables"
}

rule 'a'->'z' |  'A'->'Z' {
  repeat
    enterCharacterIntoString ( !?identifierString !*)
    enterCharacterIntoString ( !?tokenString !*)
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end
  send search identifierString in goilTemplateKeyWordList default $identifier$
}

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList style delimitersStyle error message "the '%K' delimitor"{
    "*",    "|",     ",",      "+",     "::",     ">",
    ":",     "(",    ")",     "->",      "?",    "==",
    "!",    ":=",    "[",      "]",     "+=",    "-=",
    "/",    "!=",   ">=",      "&",     "<=",      "{",     "}",
    "<",     "^",   ">>",      "~",     "<-",     "<<",     "@",   "*=",
    "/=",   "&=",   "|=",    "<<=",    ">>=",   "mod=",     "^=",  "@[",
    "@(",   "@{"
}

rule list galgasDelimitorsList

#------------------------------- Integer, floating Point Constant ------------------
@double floatValue
$literal_double$ !floatValue style floatCsts error message "a float number"
$signed_literal_integer_bigint$ !intValue style integerStyle error message "a bigint decimal number"

$-$ style delimitersStyle error message "the - delimitor"

message floatNumberConversionError : "invalid float number"
message internalError : "internal error"

rule '-' {
  select
  case '0'->'9':
    enterCharacterIntoString(!?tokenString !'-')
    enterCharacterIntoString(!?tokenString !*)
    repeat
    while '0'->'9' :
      enterCharacterIntoString(!?tokenString !*)
    while '_' :
    end
    select
    case '.' :
      enterCharacterIntoString(!?tokenString !'.')
      repeat
      while '0'->'9' :
        enterCharacterIntoString(!?tokenString !*)
      while '_' :
      end
      convertStringToDouble(!tokenString !?floatValue error floatNumberConversionError)
      send $literal_double$
    default
      convertDecimalStringIntoBigInt(!tokenString !?intValue error internalError)
      send $signed_literal_integer_bigint$
    end
  default
    send $-$
  end
}

rule '0'->'9' {
  enterCharacterIntoString(!?tokenString !*)
  repeat
  while '0'->'9' :
    enterCharacterIntoString(!?tokenString !*)
  while '_' :
  end
  select
  case '.' :
    enterCharacterIntoString(!?tokenString !'.')
    repeat
    while '0'->'9' :
      enterCharacterIntoString(!?tokenString !*)
    while '_' :
    end
    convertStringToDouble(!tokenString !?floatValue error floatNumberConversionError)
    send $literal_double$
  default
    convertDecimalStringIntoBigInt(!tokenString !?intValue error internalError)
    send $signed_literal_integer_bigint$
  end
}


#------------------------------- Floating point Number ------------------
$.$  style delimitersStyle error message "the '.' delimitor"
$.=$  style delimitersStyle error message "the '.=' delimitor"
$...$  style delimitersStyle error message "the '...' delimitor"

#--- Floating Point constant beginning with a dot
rule '.' {
  select
  case '0'->'9' :
    enterCharacterIntoString(!?tokenString !'0')
    enterCharacterIntoString(!?tokenString !'.')
    enterCharacterIntoString(!?tokenString !*)
    repeat
    while '0'->'9' :
      enterCharacterIntoString(!?tokenString !*)
    while '_' :
    end
    convertStringToDouble(!tokenString !?floatValue error floatNumberConversionError)
    send $literal_double$
  default
    select
    case ".." :
      send $...$
    case "=" :
      send $.=$
    default
      send $.$
    end
  end
}

# ------------------------------------ String ----------------------------

message unterminatedLitteralString : "Unterminated literal string" 

@string a_string

$string$ !a_string  style stringStyle error message "literal string"

rule '"' {
    repeat
    while '\u0020'->'\u0021' | '\u0023' -> '\uFFFD' :
        enterCharacterIntoString(!?a_string !*)
    end
    select
        case '"' :
            send $string$
        default
            error unterminatedLitteralString
    end
}

# ------------------------------------ Comment ----------------------------
$comment$  style commentStyle error message "a comment"
rule '#' {
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end
  drop $comment$
}

# --------------------- separators -----------------------------------------
rule '\u0001' -> ' ' {
}

}
