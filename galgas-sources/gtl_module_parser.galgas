#-----------------------------------------------------------------------------*
#
#  @file gtl_module_parser.galgas
#
#  @section desc File description
#
#  Parsing of GTL modules.
#
#  @section copyright Copyright
#
#  Goil OIL compiler, part of Trampoline RTOS
#
#  Trampoline is copyright (c) CNRS, University of Nantes,
#  Ecole Centrale de Nantes
#  Trampoline is protected by the French intellectual property law.
#
#  This software is distributed under the GNU Public Licence V2.
#  Check the LICENSE file in the root directory of Trampoline
#
#  $Date$
#  $Rev$
#  $Author$
#  $URL$
#
#-----------------------------------------------------------------------------*

syntax gtl_module_parser (gtl_scanner) {

rule <gtl_instruction_list>
  !@gtlInstructionList instructionList
 
#-----------------------------------------------------------------------------*
rule <gtl_module_start_symbol> ?!@gtlFuncMap funcMap
{
  repeat
  while
    <gtl_import> !?funcMap
  end

  repeat
  while
    <gtl_function> ?@gtlFunction function
    [!?funcMap put ![function name] !function]
  end
}

#-----------------------------------------------------------------------------*
rule <gtl_function> !@gtlFunction function
{
  $func$
  $identifier$ ?let @lstring functionName
  @location where = .here
  <gtl_argument_list> ?@gtlArgumentList arguments
  $:$ $identifier$ ?let @lstring returnVariable
  <gtl_instruction_list> ?let @gtlInstructionList instructionList
  $end$ $func$
  
  function = .new {
    !where !functionName !arguments !instructionList !returnVariable
  }
}

#-----------------------------------------------------------------------------*
rule <gtl_function_instruction_list>
  !@gtlInstructionList instructionList
{
}

#-----------------------------------------------------------------------------*
rule <gtl_argument_list> !@gtlArgumentList arguments
{
  arguments = .emptyList
  $($
  repeat
    $identifier$ ?let @lstring argumentName
    select
      $:$ $@$ $identifier$ ?let @lstring typeName
      arguments += !true ![typeName gtlType] !argumentName
    or
      arguments += !false !`@gtlData !argumentName
    end
  while $,$ 
  end
  $)$
}

#-----------------------------------------------------------------------------*
rule <gtl_import> ?!@gtlFuncMap funcMap 
{
  $import$ $string$ ?let @lstring fileName
  grammar gtl_module_grammar in fileName !?funcMap
}

}