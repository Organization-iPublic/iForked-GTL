#-----------------------------------------------------------------------------*
#
#  @file gtl_module.galgas
#
#  @section desc File description
#
#  GTL modules.
#
#  @section copyright Copyright
#
#  Goil OIL compiler, part of Trampoline RTOS
#
#  Trampoline is copyright (c) CNRS, University of Nantes,
#  Ecole Centrale de Nantes
#  Trampoline is protected by the French intellectual property law.
#
#  This software is distributed under the GNU Public Licence V2.
#  Check the LICENSE file in the root directory of Trampoline
#
#  $Date$
#  $Rev$
#  $Author$
#  $URL$
#
#-----------------------------------------------------------------------------*

list @gtlArgumentList
{
  @bool    typed
  @type    type
  @lstring name
}

class @gtlExecutableEntity
{
  @location           where
  @lstring            name
  @gtlArgumentList    formalArguments
  @gtlInstructionList instructions
}

method @gtlExecutableEntity checkArguments
  ?let @location    fromLocation
  ?let @gtlDataList actualArguments
  !@gtlVarMap       entityVariableMap
  !@bool            result
{
  result = true
  entityVariableMap = .emptyMap
  
  if [formalArguments length] != [actualArguments length] then 
    error fromLocation : "calling "
      + if [self dynamicType] == `@gtlProcedure then
        "procedure '"
      else
        "function '"
      end
      + name + "' needs " + [formalArguments length] + " arguments"
  else
    # Check the arguments have the good type
    for () in formalArguments, () in actualArguments do
      if [data dynamicType] != type & typed then
        error data : [type name] + " expected for " + name
        result = false
      else
        [!?entityVariableMap put !name !data]
      end
    end
  end
}  

class @gtlProcedure : @gtlExecutableEntity
{
}

method @gtlProcedure call
  ?@gtlContext      context
  ?!@string         outputString
  ?let @location    fromLocation
  ?let @gtlDataList actualArguments
{
  [self checkArguments
    !fromLocation !actualArguments ?@gtlVarMap procVariableMap ?@bool ok]
  if ok then
    [instructions execute !context !?procVariableMap !?outputString]
  end
}

class @gtlFunction : @gtlExecutableEntity
{
  @lstring            returnVariable
}

getter @gtlFunction call
  ?let @location    fromLocation
  ?let @gtlDataList actualArguments
  ->@gtlData        result
{
  [self checkArguments
    !fromLocation !actualArguments ?@gtlVarMap funcVariableMap ?@bool ok]
  if ok then
    @gtlContext functionContext = emptyContext()
    @string outputString = ""
    [instructions execute !functionContext !?funcVariableMap !?outputString]
    [funcVariableMap get !returnVariable ?result]
  else
   error fromLocation : "function call failed" : result
  end
}

map @gtlProcMap
{
  @gtlProcedure procedure
  insert put error message "a procedure named '%K' is already declared in %L"
  search get error message "there is no procedure named '%K'"
}

map @gtlFuncMap
{
  @gtlFunction function
  insert put error message "a function named '%K' is already declared in %L"
  search get error message "there is no function named '%K'"
}

class @gtlModule
{
  @lstring    name
  @gtlProcMap procedures
  @gtlFuncMap functions
}
